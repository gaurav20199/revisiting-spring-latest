Bean Scopes
By Default Spring creates the beans when application is run(eager initialisation).
By Default a bean scope in Spring application is Singleton.
Singleton Bean scope is completely different from Singleton Design Pattern and should not be confused.
Singleton Bean Scope in Spring means spring will provide an identifier(name) to the bean and for that bean identifier(name),
there can only be one Bean.
With Spring, you can define as many beans of the same type using methods annotated with @Bean in the configuration class.
and each of these beans is a singleton.
In Short for singleton scope bean, if we request for a bean with the identifier, Spring will always give us the
same exact bean everytime we request the bean with that identifier.
It behaves in the same way for both bean annotation and stereotype annotations.

When to use Singleton Bean Scope
By Default scope will be Singleton and Spring doesn't make the bean immutable by Default. So code can land up in a lot of
race condition scenarios.
It is usually preferred to use Singleton scope with constructor injection and marking the field as final so that the
injected field can't be modified.

If you want mutable singleton beans (whose attributes change), you need to make these beans concurrent by yourself
(mainly by employing thread synchronization). But singleton beans aren’t designed to be synchronized. They’re commonly
used to define an app’s backbone class design and delegate responsibilities one to another. Technically, synchronization is possible,
but it’s not a good practice.

Singleton scope can be defined in two ways:
1) Eager
2) Lazy

Eager vs Lazy Initialization
Eager:  Spring creates all singleton beans when it initializes the context—this is Spring’s default behavior.
Lazy: With lazy instantiation, Spring don’t create the singleton instances when it creates the context. Instead, it creates
each instance the first time someone refers to the bean.
For lazy initialization we have to use Lazy annotation. It behaves in the same way for Bean annotation and stereotype annotation.

When to use Eager vs Lazy.
Eager Use Cases:
In a lazy instantiation, the framework has to first check if the instance exists and eventually create it if it doesn’t,
so from the performance point of view, it’s better to have the instances in the context already (eager) because it spares
some checks the framework needs to do when one bean delegates to another.
Another advantage of eager instantiation is when something is wrong and the framework cannot create a bean we can
observe this issue when starting the app. With lazy instantiation, someone would observe the issue only when the app is
already executing, and it reaches the point that the bean needs to be created.
Lazy Use Case Example:
Suppose there is a vast monolithic application and the app is installed in different locations where it was used in various
scopes by its clients. In most cases, a specific client don't use a big part of the functionality, so instantiating the
beans together with the Spring context unnecessarily occupied a lot of memory. For this kind of app, the developers can
design most of the beans to be lazily instantiated so that the app would create only the necessary instances.

Prototype Scope
They are created by the Spring when they are explicitly requested and are not created when spring initialises the context.
Prototype Beans are Lazily Initialised by default
If you never request a prototype bean, it will never be created. Spring won't create or manage the lifecycle of
prototype beans unless explicitly asked to do so.
User will have to mention this scope specifically using Scope annotation.
For Bean with prototype scope Every time you request a reference to a prototype-scoped bean, Spring creates a new object instance.
For prototype beans, Spring don’t create and manage an object instance directly.
With prototype beans, we no longer have concurrency problems because each thread that requests the bean gets a different
instance, so defining mutable prototype beans is not a problem.

IMP:
If a bean is a singleton, which means that Spring creates only an instance of this class. As a consequence, Spring will
also inject the dependencies of this class just once when it creates the CommentService bean itself. In this case,
you’ll end up with only an instance of the injected bean even if the bean that is being injected to singleton bean has
been defined with prototype scope.
Be careful with injecting a prototype-scoped bean into a singleton-scoped bean. When you do something like this, you
need to be aware that the singleton instance always uses the same prototype instance, which Spring injects when it
creates the singleton instance. This is usually a vicious design because the point of making a bean prototype-scoped is
to get a different instance for every use.



